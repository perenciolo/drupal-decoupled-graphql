<?php
/**
 * @file
 * Module `full_page_background` hooks file.
 */

 use \Drupal\file\Entity\File;
 use Drupal\paragraphs\Entity\Paragraph;
 use Drupal\Component\Utility\Html;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
 function full_page_background_theme_suggestions_block_alter(array &$suggestions, array $variables) {
   if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

 /**
 * Implements hook_theme().
 */
function full_page_background_theme($existing, $type, $theme, $path)
{
    $templ_path = $path . '/templates/';

    return [
      'block__bundle__pdb_fullwidth_background' => [
        'render element' => 'elements',
        'template' => 'block--bundle--pdb-fullwidth-background',
        'path' => $templ_path . 'block',
        'base hook' => 'block',
      ],
    ];
}

/**
 * Implements template_preprocess_block().
 */
function full_page_background_preprocess_block(&$variables) {
  if (!empty($variables['content']['#block_content'])) {
    $language_manager = \Drupal::languageManager();
    $context = [
      'langcode' => $language_manager->getCurrentLanguage()->getId(),
      'operation' => 'language_hierarchy_update_priorities',
    ];
    $fallback_candidates = $language_manager->getFallbackCandidates($context);
    $hasTranslation = FALSE;
    $blockEntity = $variables['content']['#block_content'];
    foreach ($fallback_candidates as $fallback_canditate) {
      if ($blockEntity->hasTranslation($fallback_canditate)) {
        $hasTranslation = TRUE;
        break;
      }
    }
    if (!$hasTranslation) {
      // Remove content when it doesn't have a translation.
      $variables['content'] = NULL;
      return FALSE;
    }

    $block_bundle = $variables['content']['#block_content']->bundle();
    $variables['attributes']['class'][] = 'block--block-content--' . Html::cleanCssIdentifier($block_bundle);

    if ($variables['label'] !== '') {
      $variables['label'] = $variables['content']['#block_content']->label();
    }

    if (!$block_bundle) {
      return FALSE;
    }

    $block = $variables['content']['#block_content'];

    if ($block_bundle == 'pdb_fullwidth_background') {
      $paragraphs = $block->get('field_pdb_fwb_content')->referencedEntities();
      if(isset($paragraphs)) {

        if (!empty($paragraphs)) {
          foreach ($paragraphs as $index => $paragraph) {
            if (!$paragraph instanceof Paragraph) {
              continue;
            }

            if($paragraph->getType()
              && $paragraph->getType() === 'pdc_generic_image_card') {
                $target_id = $paragraph->id();
                $paragraph =Paragraph::load($target_id);

                $img = $paragraph->get('field_pdc_gic_image');
                $img_path = $img->entity && $img->entity->fid->value ? File::load($img->entity->fid->value)->url() : null;

                $data = [
                  "id" => $target_id,
                  "field_pdc_gci_description" => $paragraph->field_pdc_gci_description->value,
                  "field_pdc_gic_image" => [
                    "url" => $img_path,
                    'alt' => count($img->getValue()) ? $img->getValue()[0]['alt'] : '',
                    'width' => count($img->getValue()) ? $img->getValue()[0]['width'] : '',
                    'height' => count($img->getValue()) ? $img->getValue()[0]['height'] : '',
                    "title" => count($img->getValue()) ? $img->getValue()[0]['title'] : '',
                  ],
                  "field_pdc_gic_title" => $paragraph->field_pdc_gic_title->value,
                ];

                // Encode data for React.
                $variables['data'] = json_encode([
                  'content' => $data
                ]);
            }
          }
        }
      }
    }
  }
}
